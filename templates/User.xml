<templateSet group="User">
  <template name="imp" value="import $NAME$ from '$PACKAGE$';" description="Import packages" toReformat="true" toShortenFQNames="true">
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="req" value="const $NAME$ = require('$PACKAGE$');" description="Require packages" toReformat="true" toShortenFQNames="true">
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="api" value="apiVersion: v1&#10;kind: $END$" description="Kubernetes api" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KUBERNETES_RESOURCE" value="true" />
    </context>
  </template>
  <template name="sty" value="import styles from './$PATH$.css';$END$" description="Import matching styles" toReformat="false" toShortenFQNames="true">
    <variable name="PATH" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rfnpt" value="import {FunctionComponent} from 'react';&#10;&#10;type Props = {$Props$}&#10;&#10;export const $ComponentName$: FunctionComponent&lt;Props&gt; = (props) =&gt; (&#10;    &lt;&gt;&#10;        $END$&#10;    &lt;/&gt;&#10;); " description="React Functional Component with Props in Typescipt" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="Props" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rfnt" value="import {FunctionComponent} from 'react';&#10;&#10;export const $ComponentName$: FunctionComponent = () =&gt; (&#10;    &lt;&gt;&#10;        $END$&#10;    &lt;/&gt;&#10;); " description="React Functional Component without Props in Typescipt" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rfnptg" value="import {FunctionComponent} from 'react';&#10;&#10;type Props&lt;T extends $any$&gt; = {$Props$}&#10;&#10;export type $ComponentName$&lt;T extends $any$&gt; = FunctionComponent&lt;Props&lt;T&gt;&gt;&#10;&#10;const $ComponentName$Generic = &lt;T extends $any$&gt;(): $ComponentName$&lt;T&gt; =&gt; (props) =&gt; (&#10;    &lt;&gt;&#10;        $END$&#10;    &lt;/&gt;&#10;);&#10;&#10;export const $ComponentName$ = $ComponentName$Generic();&#10;" description="React Functional Component with Generic Props in Typescipt" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="any" expression="" defaultValue="&quot;any&quot;" alwaysStopAt="true" />
    <variable name="Props" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="exp" value="export $NAME$ from '$PACKAGE$';$END$" description="Export packages" toReformat="true" toShortenFQNames="true">
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="&quot;*&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="v" value="var(--$VAR$)" description="Insert CSS variable" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS_PROPERTY_VALUE" value="true" />
    </context>
  </template>
  <template name="nct" value="import {FunctionComponent} from 'react';&#10;&#10;type $ComponentName$ = FunctionComponent&#10;&#10;const $ComponentName$: $ComponentName$ = () =&gt; (&#10;    &lt;&gt;&#10;        $END$&#10;    &lt;/&gt;&#10;);&#10;&#10;export default $ComponentName$" description="React Functional Component without Props in Typescipt (Next)" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ssp" value="import {GetServerSideProps} from 'next';&#10;&#10;export const getServerSideProps: GetServerSideProps = async (context) =&gt; {&#10;    return {&#10;        props: {}&#10;    }&#10;};" description="Get server side props" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ncpt" value="import {FunctionComponent} from 'react';&#10;&#10;type Props = {$Props$}&#10;&#10;type $ComponentName$ = FunctionComponent&lt;Props&gt;&#10;&#10;const $ComponentName$: $ComponentName$ = (props) =&gt; (&#10;    &lt;&gt;&#10;        $END$&#10;    &lt;/&gt;&#10;);&#10;&#10;export default $ComponentName$" description="React Functional Component with Props in Typescipt (Next)" toReformat="true" toShortenFQNames="true">
    <variable name="Props" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ComponentName" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="napit" value="import {NextApiHandler} from 'next';&#10;&#10;const $handler$: NextApiHandler = async (req, res) =&gt; {&#10;$END$    &#10;};&#10;&#10;export default $handler$;&#10;" description="Next API handler in Typescript" toReformat="false" toShortenFQNames="true">
    <variable name="handler" expression="camelCase(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>